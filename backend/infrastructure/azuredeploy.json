{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "description": "ARM template for Cloud Resume Challenge - Azure backend infrastructure",
        "author": "Cloud Resume Challenge"
    },
    "parameters": {
        "projectName": {
            "type": "string",
            "defaultValue": "cloudresume",
            "minLength": 3,
            "maxLength": 10,
            "metadata": {
                "description": "Name of the project used for naming resources"
            }
        },
        "environment": {
            "type": "string",
            "defaultValue": "dev",
            "allowedValues": [
                "dev",
                "staging",
                "prod"
            ],
            "metadata": {
                "description": "Environment name (dev, staging, prod)"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources"
            }
        },
        "customDomainName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Custom domain name for the website (optional)"
            }
        },
        "enableApplicationInsights": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Enable Application Insights for monitoring"
            }
        }
    },
    "variables": {
        "uniqueSuffix": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
        "storageAccountName": "[concat(parameters('projectName'), 'stor', variables('uniqueSuffix'))]",
        "functionAppName": "[concat(parameters('projectName'), '-func-', parameters('environment'), '-', variables('uniqueSuffix'))]",
        "appServicePlanName": "[concat(parameters('projectName'), '-plan-', parameters('environment'))]",
        "cosmosDbAccountName": "[concat(parameters('projectName'), '-cosmos-', parameters('environment'), '-', variables('uniqueSuffix'))]",
        "applicationInsightsName": "[concat(parameters('projectName'), '-ai-', parameters('environment'))]",
        "cdnProfileName": "[concat(parameters('projectName'), '-cdn-', parameters('environment'))]",
        "cdnEndpointName": "[concat(parameters('projectName'), '-endpoint-', variables('uniqueSuffix'))]",
        "keyVaultName": "[concat(parameters('projectName'), '-kv-', variables('uniqueSuffix'))]",
        "logAnalyticsWorkspaceName": "[concat(parameters('projectName'), '-logs-', parameters('environment'))]",
        "cosmosDbDatabaseName": "CloudResumeDB",
        "cosmosDbContainerName": "VisitorCounter"
    },
    "resources": [
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2021-06-01",
            "name": "[variables('logAnalyticsWorkspaceName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                },
                "retentionInDays": 30,
                "features": {
                    "enableLogAccessUsingOnlyResourcePermissions": true
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2022-09-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": true,
                "staticWebsite": {
                    "enabled": true,
                    "indexDocument": "index.html",
                    "errorDocument404Path": "404.html"
                },
                "encryption": {
                    "services": {
                        "blob": {
                            "enabled": true
                        },
                        "file": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            },
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "purpose": "static-website"
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "apiVersion": "2023-04-15",
            "name": "[variables('cosmosDbAccountName')]",
            "location": "[parameters('location')]",
            "kind": "GlobalDocumentDB",
            "properties": {
                "enableFreeTier": true,
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "Session"
                },
                "locations": [
                    {
                        "locationName": "[parameters('location')]",
                        "failoverPriority": 0,
                        "isZoneRedundant": false
                    }
                ],
                "capabilities": [
                    {
                        "name": "EnableTable"
                    },
                    {
                        "name": "EnableServerless"
                    }
                ],
                "backupPolicy": {
                    "type": "Periodic",
                    "periodicModeProperties": {
                        "backupIntervalInMinutes": 240,
                        "backupRetentionIntervalInHours": 720,
                        "backupStorageRedundancy": "Local"
                    }
                },
                "networkAclBypass": "AzureServices",
                "publicNetworkAccess": "Enabled"
            },
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "purpose": "visitor-counter-database"
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
            "apiVersion": "2023-04-15",
            "name": "[concat(variables('cosmosDbAccountName'), '/', variables('cosmosDbDatabaseName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "[variables('cosmosDbDatabaseName')]"
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2023-04-15",
            "name": "[concat(variables('cosmosDbAccountName'), '/', variables('cosmosDbDatabaseName'), '/', variables('cosmosDbContainerName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDbAccountName'), variables('cosmosDbDatabaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "[variables('cosmosDbContainerName')]",
                    "partitionKey": {
                        "paths": [
                            "/id"
                        ],
                        "kind": "Hash"
                    }
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2023-02-01",
            "name": "[variables('keyVaultName')]",
            "location": "[parameters('location')]",
            "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "family": "A",
                    "name": "standard"
                },
                "accessPolicies": [],
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 7,
                "enableRbacAuthorization": true,
                "publicNetworkAccess": "Enabled"
            },
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "purpose": "secrets-management"
            }
        },
        {
            "condition": "[parameters('enableApplicationInsights')]",
            "type": "Microsoft.Insights/components",
            "apiVersion": "2020-02-02",
            "name": "[variables('applicationInsightsName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "kind": "web",
            "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
            },
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "purpose": "application-monitoring"
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2022-03-01",
            "name": "[variables('appServicePlanName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic",
                "size": "Y1",
                "family": "Y",
                "capacity": 0
            },
            "kind": "functionapp",
            "properties": {
                "reserved": true
            },
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "purpose": "function-hosting"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2022-03-01",
            "name": "[variables('functionAppName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]",
                "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
            ],
            "kind": "functionapp,linux",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "reserved": true,
                "httpsOnly": true,
                "siteConfig": {
                    "linuxFxVersion": "Python|3.9",
                    "appSettings": [
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value, ';EndpointSuffix=core.windows.net')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value, ';EndpointSuffix=core.windows.net')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(variables('functionAppName'))]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~4"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "python"
                        },
                        {
                            "name": "COSMOS_DB_ENDPOINT",
                            "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))).documentEndpoint]"
                        },
                        {
                            "name": "COSMOS_DB_KEY",
                            "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName')), '2023-04-15').primaryMasterKey]"
                        },
                        {
                            "name": "COSMOS_DB_DATABASE",
                            "value": "[variables('cosmosDbDatabaseName')]"
                        },
                        {
                            "name": "COSMOS_DB_CONTAINER",
                            "value": "[variables('cosmosDbContainerName')]"
                        },
                        {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[if(parameters('enableApplicationInsights'), reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).ConnectionString, '')]"
                        },
                        {
                            "name": "WEBSITE_RUN_FROM_PACKAGE",
                            "value": "1"
                        }
                    ],
                    "cors": {
                        "allowedOrigins": [
                            "*"
                        ],
                        "supportCredentials": false
                    },
                    "ftpsState": "Disabled",
                    "minTlsVersion": "1.2"
                }
            },
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "purpose": "visitor-counter-api"
            }
        },
        {
            "type": "Microsoft.Cdn/profiles",
            "apiVersion": "2021-06-01",
            "name": "[variables('cdnProfileName')]",
            "location": "Global",
            "sku": {
                "name": "Standard_Microsoft"
            },
            "properties": {},
            "tags": {
                "project": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "purpose": "cdn-https"
            }
        },
        {
            "type": "Microsoft.Cdn/profiles/endpoints",
            "apiVersion": "2021-06-01",
            "name": "[concat(variables('cdnProfileName'), '/', variables('cdnEndpointName'))]",
            "location": "Global",
            "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles', variables('cdnProfileName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "originHostHeader": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.web, 'https://', ''), '/', '')]",
                "isHttpAllowed": false,
                "isHttpsAllowed": true,
                "queryStringCachingBehavior": "IgnoreQueryString",
                "origins": [
                    {
                        "name": "origin1",
                        "properties": {
                            "hostName": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.web, 'https://', ''), '/', '')]",
                            "httpPort": 80,
                            "httpsPort": 443,
                            "originHostHeader": "[replace(replace(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.web, 'https://', ''), '/', '')]",
                            "priority": 1,
                            "weight": 1000,
                            "enabled": true
                        }
                    }
                ],
                "defaultOriginGroup": {
                    "id": "[resourceId('Microsoft.Cdn/profiles/endpoints/originGroups', variables('cdnProfileName'), variables('cdnEndpointName'), 'default')]"
                },
                "optimizationType": "GeneralWebDelivery"
            }
        }
    ],
    "outputs": {
        "storageAccountName": {
            "type": "string",
            "value": "[variables('storageAccountName')]"
        },
        "storageAccountWebEndpoint": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.web]"
        },
        "functionAppName": {
            "type": "string",
            "value": "[variables('functionAppName')]"
        },
        "functionAppUrl": {
            "type": "string",
            "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('functionAppName'))).defaultHostName)]"
        },
        "cosmosDbAccountName": {
            "type": "string",
            "value": "[variables('cosmosDbAccountName')]"
        },
        "cosmosDbEndpoint": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))).documentEndpoint]"
        },
        "cdnEndpointUrl": {
            "type": "string",
            "value": "[concat('https://', reference(resourceId('Microsoft.Cdn/profiles/endpoints', variables('cdnProfileName'), variables('cdnEndpointName'))).hostName)]"
        },
        "applicationInsightsInstrumentationKey": {
            "condition": "[parameters('enableApplicationInsights')]",
            "type": "string",
            "value": "[if(parameters('enableApplicationInsights'), reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey, '')]"
        },
        "keyVaultName": {
            "type": "string",
            "value": "[variables('keyVaultName')]"
        },
        "resourceGroupName": {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "deploymentSummary": {
            "type": "object",
            "value": {
                "projectName": "[parameters('projectName')]",
                "environment": "[parameters('environment')]",
                "location": "[parameters('location')]",
                "resources": {
                    "storageAccount": "[variables('storageAccountName')]",
                    "functionApp": "[variables('functionAppName')]",
                    "cosmosDb": "[variables('cosmosDbAccountName')]",
                    "cdn": "[variables('cdnProfileName')]",
                    "keyVault": "[variables('keyVaultName')]"
                },
                "endpoints": {
                    "website": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.web]",
                    "api": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('functionAppName'))).defaultHostName, '/api')]",
                    "cdn": "[concat('https://', reference(resourceId('Microsoft.Cdn/profiles/endpoints', variables('cdnProfileName'), variables('cdnEndpointName'))).hostName)]"
                }
            }
        }
    }
}